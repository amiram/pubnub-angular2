{"version":3,"sources":["pubnub-angular2.js"],"names":["PubNubAngular","PubNub","Error","wrappers","initConfig","instance","getInstance","default_instance_name","init","instanceName","length","attributes_to_delegate","forEach","attribute","wrapAttribute","Object","defineProperty","get","methods_to_delegate","method","wrapMethod","defaultInstance","apply","arguments","args","subscribe","unsubscribe","channel","callback","getMessage","getPresence","getStatus","getError","clean","release"],"mappings":"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","file":"pubnub-angular2.js","sourcesContent":["/* global window */\nimport config from '../config.json';\nimport { Wrapper } from './wrapper';\n\nexport class PubNubAngular {\n  constructor() {\n    if (typeof PubNub === 'undefined' || PubNub === null) {\n      throw new Error('PubNub is not in global scope. Ensure that pubnub.js v4 library is included before the angular adapter');\n    }\n\n    this.wrappers = {};\n  }\n\n  /**\n   * Initializer for default instance\n   *\n   * @param {Object} initConfig\n   */\n  init(initConfig) {\n\n    let instance = this.getInstance(config.default_instance_name);\n\n    instance.init(initConfig);\n\n    return instance;\n  }\n\n  /**\n   * Instance getter\n   *\n   * @param instanceName\n   * @returns {Wrapper}\n   */\n  getInstance(instanceName) {\n    let instance = this.wrappers[instanceName];\n\n    if (instance && instance instanceof Wrapper) {\n      return instance;\n    } else if (typeof instanceName === 'string' && instanceName.length > 0) {\n      this.wrappers[instanceName] = new Wrapper(instanceName, this);\n\n      config.attributes_to_delegate.forEach((attribute) => {\n        this.wrappers[instanceName].wrapAttribute(attribute);\n\n        if (!this[attribute]) {\n          Object.defineProperty(this, attribute, {\n            get: function () {\n              return this.getInstance(config.default_instance_name)[attribute];\n            }\n          });\n        }\n      });\n\n      config.methods_to_delegate.forEach((method) => {\n        this.wrappers[instanceName].wrapMethod(method);\n\n        if (!this[method]) {\n          this[method] = function () {\n            let defaultInstance = this.getInstance(config.default_instance_name);\n            return defaultInstance[method].apply(defaultInstance, arguments);\n          };\n        }\n      });\n\n      return this.wrappers[instanceName];\n    }\n\n    return instance;\n  }\n\n  /**\n   * Subscribe method wrapped for default instance\n   *\n   * @param {object} args\n   */\n  subscribe(args) {\n    this.getInstance(config.default_instance_name).subscribe(args);\n  }\n\n  /**\n   * Unsubscribe method wrapped for default instance\n   *\n   * @param {object} args\n   */\n  unsubscribe(args) {\n    this.getInstance(config.default_instance_name).unsubscribe(args);\n  }\n\n  /**\n   * GetMessage method wrapped for default instance\n   *\n   * @param {string|[string]} channel\n   * @param callback\n   * @returns [object] array\n   */\n  getMessage(channel, callback) {\n    return this.getInstance(config.default_instance_name).getMessage(channel, callback);\n  }\n\n  /**\n   * GetPresence method wrapped for default instance\n   *\n   * @param {string|[string]} channel\n   * @param callback\n   */\n  getPresence(channel, callback) {\n    this.getInstance(config.default_instance_name).getPresence(channel, callback);\n  }\n\n  /**\n   * GetStatus method wrapped for default instance\n   *\n   * @param {string|[string]} channel\n   * @param callback\n   */\n  getStatus(channel, callback) {\n    this.getInstance(config.default_instance_name).getStatus(channel, callback);\n  }\n\n  /**\n   * GetError method wrapped for default instance\n   *\n   * @param callback\n   */\n  getError(callback) {\n    this.getInstance(config.default_instance_name).getError(callback);\n  }\n\n  /**\n   * Clean Method wrapped for default instance\n   *\n   * @param {string|[string]} channel\n   */\n  clean(channel) {\n    this.getInstance(config.default_instance_name).clean(channel);\n  }\n\n  /**\n   * Release Method wrapped for default instance\n   *\n   * @param {string|[string]} channel\n   */\n  release(channel) {\n    this.getInstance(config.default_instance_name).release(channel);\n  }\n}\n"]}